# Copyright 2021 Eric Lawrey - Australian Institute of Marine Science
#
# MIT License https://mit-license.org/
# This script converts the Geotiff images generated by the Google Earth Engine (GEE) into a
# format for publication to the web. This script sets the no-data value to 0 to ensure
# the image borders come out transparent. It also adds overviews for efficient rendering.
# Files downloaded from GEE should be saved in 02-gee-composites/in_gee.
# 
# Script environment - Windows
# To run this Python script you will need GDAL installed. The easiest way on Windows is to 
# install GDAL via OSGeo4W (https://www.osgeo.org/projects/osgeo4w/). This package allows
# multiple GIS tools to be installed. For this script you will need GDAL and Python. Many of
# the GDAL commands are written in Python and so we will run this script in the same Python
# installation to ensure all the paths are setup. 
# 
# Run this script from an OSGeo4W command window to ensure all the paths are correct.
# The default path for this is in C:\OSGeo4W64\OSGeo4W.bat
# In that command line window cd to the location of this script then run:
# python convert.py

import os
import subprocess
import glob

SRC_PATH = '../../input-gee-imagery'
OUT_PATH = '../../finaldata'

# Using a system call to gdal_translate as the documentation associated with calling
# gdal.Translate within Python is poor and incomplete. Some documentation that might be useful
# in the future though: https://gdal.org/python/osgeo.gdal-module.html#TranslateOptions
#from osgeo import gdal
#ds = gdal.Open(os.path.join(SRC_PATH,filename))
#ds = gdal.Translate(os.path.join(OUT_PATH,filename),ds, format="GTiff", outputType=gdalconst.GDT_Byte)

if not os.path.exists(OUT_PATH):
	os.mkdir(OUT_PATH)
	print("Making output directory"+OUT_PATH)

# Search through all the files to be processed, downloaded from Google Earth Engine
# We don't permanently retain these files because they are large. We should therefore
# consider the files in the SRC_PATH to be a temporary holding area until they have
# been converted into a smaller format.
srcFiles = glob.glob(os.path.join(SRC_PATH,"*.tif"))

fileCount = 1
numFiles = len(srcFiles)
for srcFile in srcFiles:
	print("Processing "+str(fileCount)+" of "+str(numFiles)+" files")
	fileCount = fileCount+1
	# Extract the filename from the path so we can create the destination path
	fileName = os.path.basename(srcFile)
	
	# Extract the image style from the file name
	# Examples: 
	# CS_AIMS_Sentinel2-marine_V0_R1_DeepMarine_55KFA_201610-201808-n5.tif
	# CS_AIMS_Sentinel2-marine_V0_R2_DeepMarine_55KFA_201608-201808-n9.tif
	# CS_AIMS_Sentinel2-marine_V0_R1_ReefTop_55KHA_201606-201808-n4.tif
	# In these examples we want 'R1_DeepMarine', 'R2_DeepMarine', 'ReefTop' 
	# Extract this to put each image style in a different directory.
	# Assume that the naming convention is as in the example.
	styles = ['R1_DeepMarine','R2_DeepMarine','R1_ReefTop','R1_Shallow','R1_TrueColour']
	imgStyle = 'Unknown'
	for style in styles:
		if(style in fileName):
			imgStyle = style
	if imgStyle == 'Unknown':
		raise AssertionError('image contains unknown style: '+srcFile)
	
	# Create an output directory for the style if it doesn't already exists
	outStylePath = os.path.join(OUT_PATH, imgStyle)
	if not os.path.exists(outStylePath):
		os.mkdir(outStylePath)
	
	dest = os.path.join(outStylePath, fileName)
	
	# Test if the destination file already exists. If so skip over the conversion.
	if os.path.isfile(dest): 
		print("Skipping "+fileName+" as output already exists "+dest)
	else:
		#subprocess.call('gdal_translate -ot Byte -scale 0 1 1 255 -co "COMPRESS=LZW" -co "TILED=YES" -a_nodata 0 '+srcFile+' '+dest)
		#subprocess.call('gdal_translate -scale 0 254 1 255 -co "COMPRESS=LZW" -co "TILED=YES" -a_nodata 0 '+srcFile+' '+dest)
		subprocess.call('gdal_translate -co "COMPRESS=LZW" -co "TILED=YES" -a_nodata 0 '+srcFile+' '+dest)
		subprocess.call('gdaladdo -r average '+dest+' 2 4 8 16 32 64 128')


